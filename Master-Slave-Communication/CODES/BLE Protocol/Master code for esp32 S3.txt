// Master code for esp32 S3

#include <esp_now.h>
#include <WiFi.h>

// Replace with your actual slave MAC address
uint8_t slaveAddress[] = {0xE4, 0x65, 0xb8, 0x53, 0xf5, 0xc0}; // ESP 32 WROOM ADDRESS FEEDED 

// Structure to send
typedef struct struct_message {
  char message[32];
} struct_message;

struct_message outgoingMessage;

// Send interval in milliseconds
const unsigned long sendInterval = 5000; //  MESSAGE WILL SEND EVERY 5 SEC
unsigned long lastSendTime = 0;

void onDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Delivery Status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Success" : "Fail");
}

void setup() {
  Serial.begin(115200);

  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);
  Serial.print("ESP32 Master MAC Address: ");
  Serial.println(WiFi.macAddress());

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Register send callback
  esp_now_register_send_cb(onDataSent);

  // Register peer
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, slaveAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }

  // Set initial message
  strcpy(outgoingMessage.message, "HELLO");
}

void loop() {
  unsigned long currentTime = millis();

  if (currentTime - lastSendTime >= sendInterval) {
    esp_err_t result = esp_now_send(slaveAddress, (uint8_t *) &outgoingMessage, sizeof(outgoingMessage));
    if (result == ESP_OK) {
      Serial.println("Message Sent: HELLO");
    } else {
      Serial.print("Send Error: ");
      Serial.println(result);
    }
    lastSendTime = currentTime;
  }
}
